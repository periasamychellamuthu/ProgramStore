//	int arr[] = {1, 2, 3, 4};
//	int m = arr.length;
//  DymanicProgramming dyp = new DymanicProgramming();
//  dyp.possibleCombinations(arr, m-1,new ArrayList<Integer>());

//METHOD 1
public void possibleCombinations(int array[],int arraySize,List<Integer> combinations) {
    if(arraySize < 0) {
        return;
    }
    //below line is to divide the problem to sub problems
    possibleCombinations(array,arraySize-1,combinations);
    int element = array[arraySize];
    if(combinations.contains(element)) {
        return;
    }
    combinations.add(element);
    System.out.println(Arrays.toString(combinations.toArray()));
    possibleCombinations(array,arraySize,combinations);
    combinations .remove(combinations.size()-1);
}

//METHOD 2
//permutation of 12 is 12,21
//	dyp.permutation("123",0);
public void permutation(String string,int pos) {
    if(pos > string.length()-1) {
        System.out.println(string);
        return;
    }
    for(int i=pos;i<string.length();i++) {
        string = swapString(pos,i,string);
        permutation(string,pos+1);
        string = swapString(pos,i,string);
        
    }
}

//TO GET VALUE OF THE PERMUTATION

//to get possible permutation and combinations value.
// value=fact(n)/fact(n-r)
// where n is the arraysize and r is the length of the permutation
//a={1,2,3,4,5,6} , res={1,2,3},{1,3,2},...
//then a=6 and r=3

//Permutation = fact(n) / fact(n-r);